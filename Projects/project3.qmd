---
title: "Client Report - [Insert Project Title]"
subtitle: "Course DS 250"
author: "[STUDENT NAME]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---


```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
import sqlite3
```


## Elevator pitch

_Overall the lahmansbaseball database gives us important insight about baseball team and players here we can get insight with player school, name and performance ._

```{python}
#| label: project data
#| code-summary: Read and format project data
# Include and execute your code here



sqlite_file = "C:\\Users\\ketsi\\OneDrive\\Desktop\\lahmansbaseballdb.sqlite"
con = sqlite3.connect(sqlite_file)

q = 'SELECT * FROM allstarfull'
results = pd.read_sql_query(q, con)

print(results)



```


## QUESTION|TASK 1

__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report__

_After analysing of the table there is no BYU-Idaho player that play Baseball at that level_

```{python}
#| label: Q1
#| code-summary: Read and format data
# Include and execute your code here

p = '''

SELECT allstarfull.playerID, schools.schoolID, schools.name_full, Salaries.salary, allstarfull.yearID, allstarfull.teamID
FROM allstarfull
JOIN CollegePlaying ON CollegePlaying.playerID = allstarfull.playerID
JOIN schools ON CollegePlaying.schoolID = schools.schoolID
JOIN Salaries ON allstarfull.playerID = Salaries.playerID
WHERE schools.name_full = "Brigham Young University-Idaho"
ORDER BY Salaries.salary DESC
LIMIT 5;


'''
con = sqlite3.connect(sqlite_file)
results = pd.read_sql_query(p,con)
results.tail()
```



## QUESTION|TASK 2
__This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats) Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report. Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results. Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results__


_the analysis shows the first five batting average with at least 1 at bat, the first five batting average with at least 10 at bat and the Table per player with at least 100 at bat. Overall this three table gives us insight about batting averages  _

```{python}
#| label: Q2
#| code-summary: Read and format data
#| fig-cap: "Table of the first five batting average with at least 1 at bat"
# Include and execute your code here

q = '''
SELECT playerID , yearID, ROUND(H*1.0/AB,3) AS Batting_average 
FROM Batting
WHERE AB>1
ORDER BY Batting_average DESC, playerID 
LIMIT 5
'''
con = sqlite3.connect(sqlite_file)
results = pd.read_sql_query(q,con)
results.head()

```



```{python}
#| label: Q2 chart
#| code-summary: plot example
#| fig-cap: "Table of the first five batting average with at least 10 at bat"
#| fig-align: center
# Include and execute your code here

q2 = '''
SELECT playerID , yearID, ROUND(H*1.0/AB,3) AS Batting_average 
FROM Batting
WHERE AB>=10
ORDER BY Batting_average DESC, playerID 
LIMIT 5
'''
con = sqlite3.connect(sqlite_file)
results = pd.read_sql_query(q2,con)
results.head()
```


```{python}
#| label: Q2 table
#| code-summary: table example
#| tbl-cap: "Table per player with at least 100 at bat"
#| tbl-cap-location: top
# Include and execute your code here

q3 ='''
SELECT playerID, ROUND(SUM(H)*1.0/SUM(AB), 3) AS Batting_average 
FROM Batting
WHERE AB >= 100
GROUP BY playerID
ORDER BY Batting_average DESC, playerID 
LIMIT 5;

'''
con = sqlite3.connect(sqlite_file)
results = pd.read_sql_query(q3,con)
results.head()
```


## QUESTION|TASK 3

__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Plotly Express to visualize the comparison. What do you learn?__

_ From the Chart showing comparing the Yankee and the Dodgers winning ratio we notice that overall the yankees performed better than the dodgers having the highest winning ratio thee years (1927 :0.71 victory per game, 1939:0.7 victory per game and 1998:0.7 victory per game)_

```{python}
#| label: Q3
#| code-summary: Read and format data
#| tbl-cap: "New York Yankees and Los Angeles Dodgers winning and lossing ratio "
# Include and execute your code here

q4 = '''
SELECT teamID , name,ROUND(W*1.0/G,2) AS Wining_ratio,Round(L*1.0/G) AS Losing_ratio, yearID
FROM Teams
WHERE name = 'New York Yankees'OR name='Los Angeles Dodgers'


'''
con = sqlite3.connect(sqlite_file)
results = pd.read_sql_query(q4,con)
results

```



```{python}
#| label: Q3 chart
#| code-summary: plot example
#| fig-align: center
# Include and execute your code here
chart = px.line(results,
    x= "yearID" ,
    y="Wining_ratio",
    color= "name",
    title= "Yankees and Dodger winning ratio over the years"
)
chart.show()
```

