---
title: "Client Report - [Insert Project Title]"
subtitle: "Course DS 250"
author: "[STUDENT NAME]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---


```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
import sqlite3
```


## Elevator pitch

_paste your elevator pitch here_
_A SHORT (4-5 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._

```{python}
#| label: project data
#| code-summary: Read and format project data
# Include and execute your code here



sqlite_file = "C:\\Users\\ketsi\\OneDrive\\Desktop\\lahmansbaseballdb.sqlite"
con = sqlite3.connect(sqlite_file)

q = 'SELECT * FROM allstarfull'
results = pd.read_sql_query(q, con)

print(results)



```

__Highlight the Questions and Tasks__

## QUESTION|TASK 1

__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report__

_type your results and analysis here_

```{python}
#| label: Q1
#| code-summary: Read and format data
# Include and execute your code here

p = '''

SELECT allstarfull.playerID, schools.schoolID, Salaries.salary, allstarfull.yearID, allstarfull.teamID
FROM allstarfull
JOIN  Salaries ON allstarfull.playerID =  Salaries.playerID
JOIN  CollegePlaying ON  CollegePlaying.playerID = allstarfull.playerID
JOIN schools ON  CollegePlaying.schoolID  = schools.schoolID 
order by salary desc
LIMIT 5

'''
```



```{python}

con = sqlite3.connect(sqlite_file)
results = pd.read_sql_query(p,con)
results.tail()


```


## QUESTION|TASK 2
__This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats) Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report. Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results. Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results__


_type your results and analysis here_

```{python}
#| label: Q2
#| code-summary: Read and format data
# Include and execute your code here

q = '''
SELECT playerID , yearID, ROUND(H*1.0/AB,3) AS Batting_average 
FROM Batting
WHERE AB>1
ORDER BY Batting_average DESC, playerID 
LIMIT 5
'''
con = sqlite3.connect(sqlite_file)
results = pd.read_sql_query(q,con)
results.head()

```

_include figures in chunks and discuss your findings in the figure._

```{python}
#| label: Q2 chart
#| code-summary: plot example
#| fig-cap: "My useless chart"
#| fig-align: center
# Include and execute your code here
# Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.

q2 = '''
SELECT playerID , yearID, ROUND(H*1.0/AB,3) AS Batting_average 
FROM Batting
WHERE AB>=10
ORDER BY Batting_average DESC, playerID 
LIMIT 5
'''
con = sqlite3.connect(sqlite_file)
results = pd.read_sql_query(q2,con)
results.head()
```


```{python}
#| label: Q2 table
#| code-summary: table example
#| tbl-cap: "Not much of a table"
#| tbl-cap-location: top
# Include and execute your code here
# Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results
q3 ='''
SELECT playerID, ROUND(SUM(H)*1.0/SUM(AB), 3) AS Batting_average 
FROM Batting
WHERE AB >= 100
GROUP BY playerID
ORDER BY Batting_average DESC, playerID 
LIMIT 5;

'''
con = sqlite3.connect(sqlite_file)
results = pd.read_sql_query(q3,con)
results.head()
```


## QUESTION|TASK 3

__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Plotly Express to visualize the comparison. What do you learn?__

_type your results and analysis here_

```{python}
#| label: Q3
#| code-summary: Read and format data
# Include and execute your code here
q4 = '''
SELECT teamID , name,ROUND(W*1.0/G,2) AS Wining_ratio,Round(L*1.0/G) AS Losing_ratio, yearID
FROM Teams
WHERE name = 'New York Yankees'OR name='Los Angeles Dodgers'


'''
con = sqlite3.connect(sqlite_file)
results = pd.read_sql_query(q4,con)
results

```

_include figures in chunks and discuss your findings in the figure._

```{python}
#| label: Q3 chart
#| code-summary: plot example
#| fig-align: center
# Include and execute your code here
chart = px.line(results,
    x= "yearID" ,
    y="Wining_ratio",
    color= "name",
    title= "Yankees and Dodger winning ratio over the years"
)
chart.show()
```

