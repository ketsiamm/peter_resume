---
title: "Client Report - [Insert Project Title]"
subtitle: "Course DS 250"
author: "[STUDENT NAME]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
```


## Elevator pitch

_overall the flight data gives insights about flights in seven different airport it has important feature to visualize and analyse about flight delay   ._

```{python}
#| label: project data
#| code-summary: Read and format project data
# Include and execute your code here
df_original = pd.read_json('https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json')
```



## QUESTION|TASK 1

__Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”). In your report include one record example (one row) from your new data, in the raw JSON format. Your example should display the “NaN” for at least one missing value.__

```{python}
#| label: Q1
#| code-summary: Read and format data
# Include and execute your code here

df = df_original

#summing all the missing values by columns

missing_values = df.isna().sum()
#filling the missing years values
df['year'] = df['year'].fillna(method ='ffill')
df.head()


#filling the missing minutes_delayed_carrier values with the mean

mean_d_carrier = df['minutes_delayed_carrier'].mean()
df['minutes_delayed_carrier'] = df['minutes_delayed_carrier'].fillna(mean_d_carrier)

# replacing the -999 of num_of_delays_late_aircraft values with NaN

df['num_of_delays_late_aircraft'] = df['num_of_delays_late_aircraft'].replace(-999,np.nan)
#dropping the NaN values
df.dropna(inplace=True)
#dropping the empty string
df = df[df['airport_name'] != '']
df = df[df['month'] != '']




# Assuming df is your DataFrame




# Convert the first record to JSON format
raw_json = df.head(1).to_json(orient='records')


```


```{python}
#| label: Q1 chart
#| code-summary: plot example
#| fig-align: center
# Include and execute your code here

raw_json
```


## QUESTION|TASK 2

__Which airport has the worst delays? Discuss the metric you chose, and why you chose it to determine the “worst” airport. Your answer should include a summary table that lists (for each airport) the total number of flights, total number of delayed flights, proportion of delayed flights, and average delay time in hours.__

_i am using the total number of delay and the total number of minute delay to evaluate the airport that has the worst delay and after analysis it is the Chicago O'Hare International airport that has the worst one. i choose those metrics because it sum all the differents delays that we have on the tables_

```{python}
#| label: Q2
#| code-summary: Read and format data
# Include and execute your code here

# import pandas as pd

df['minute_delayed_hours'] = df['minutes_delayed_total'] / 60

df['proportion_of_delayed_flight'] = df['num_of_delays_total']/ df['num_of_flights_total']

worst_airport = df.groupby('airport_name').agg(
    total_flights=pd.NamedAgg(column='num_of_flights_total', aggfunc='sum'),
    total_number_of_delayed=pd.NamedAgg(column='num_of_delays_total', aggfunc='sum'),
    average_delay=pd.NamedAgg(column='minute_delayed_hours', aggfunc='mean'),
    proportion_delay = pd.NamedAgg(column='proportion_of_delayed_flight', aggfunc='sum')
).round(2)
worst_airport = worst_airport.reset_index()



```


_ithis table shows the different number of total delay,average delay and portion delay by airport. It can help us understand which airport has the worst delay by flight _

```{python}
#| label: Q2 table
#| code-summary: table example
#| tbl-cap: "table of the total_flights,total_number_of_delayed, average_delay and proportion_delay by airport"
#| tbl-cap-location: top
# Include and execute your code here
worst_airport

```


## QUESTION|TASK 3

__What is the best month to fly if you want to avoid delays of any length? Discuss the metric you chose and why you chose it to calculate your answer. Include one chart to help support your answer, with the x-axis ordered by month. (To answer this question, you will need to remove any rows that are missing the Month variable.)__

_ if you want to avoid delay of any sort you should fly in november because it got the lowest delay of average of delay. i choose the hours delay because i think that no matter the amount of delay you can have what matter most is the amount of time because people can bear some minute delay even if it happen frequently_

```{python}
#| label: Q3
#| code-summary: Read and format data
# Include and execute your code here
df['month'].replace('n/a',np.nan,inplace =True)
df.dropna(inplace=True)

df['minute_delayed_hours'] =( df['minutes_delayed_total'] / 60 ).round(2)
best_months = df.groupby('month').agg(
     average_delay=pd.NamedAgg(column='minute_delayed_hours', aggfunc='mean')

).round(2)
best_months = best_months.reset_index()





```



```{python}
#| label: Q3 chart
#| code-summary: plot example
#| fig-cap: "average delay by month"
#| fig-align: center
# Include and execute your code here


# Assuming 'best_months' DataFrame contains the data with the 'month' column as an ordered categorical variable

# Define the order of the months
month_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Convert 'month' column to ordered categorical with specified order
best_months['month'] = pd.Categorical(best_months['month'], categories=month_order, ordered=True)

# Sort 'best_months' DataFrame by the 'month' column
best_months_sorted = best_months.sort_values(by='month', ignore_index=True)

# Plot bar chart using Plotly Express
chart = px.bar(best_months_sorted,
               x='month',
               y='average_delay',
               title='Average Delay by Month',
               labels={'month': 'Month', 'average_delay': 'Average Delay'})

# Show the chart
chart.show()


```

## QUESTION|TASK 4
__According to the BTS website, the “Weather” category only accounts for severe weather delays. Mild weather delays are not counted in the “Weather” category, but are actually included in both the “NAS” and “Late-Arriving Aircraft” categories. Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild). You will need to replace all the missing values in the Late Aircraft variable with the mean. Show your work by printing the first 5 rows of data in a table. Use these three rules for your calculations__

_this weather table show the number of delay flight by weather(both severe and mild), the proportion of weather delay and the proportion of weather total ._

```{python}
#| label: Q4 table
#| code-summary: table example
#| tbl-cap: "weather table"
#| tbl-cap-location: top
# Include and execute your code here
flights = df
weather = (flights.assign(
    severe = flights.num_of_delays_weather, # no missing
    nodla_nona = lambda x: (x.num_of_delays_late_aircraft
        .replace(-999, np.nan)), #missing is -999
    mild_late = lambda x: x.nodla_nona.fillna(x.nodla_nona.mean())*0.3,
    mild = np.where(
        flights.month.isin(['April', 'May', 'June', 'July', 'August']), 
            flights.num_of_delays_nas*0.4,
            flights.num_of_delays_nas*0.65),
    weather = lambda x: x.severe + x.mild_late + x.mild,
    proportion_weather_delay = lambda x: x.weather / x.num_of_delays_total,
    proportion_weather_total = lambda x:  x.weather / x.num_of_flights_total)
    .filter(['airport_code','month','year', 'severe','mild', 'mild_late',
    'weather', 'proportion_weather_total', 
    'proportion_weather_delay', 'num_of_flights_total', 'num_of_delays_total']))
weather.head()
```


## QUESTION|TASK 5
__Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Discuss what you learn from this graph.__

_as we can see this chart the San Franscisco airport has the highest proportion of flight delayed by weather and that the Atlanta airport has the lowest one. _


```{python}
#| label: Q5 chart
#| code-summary: plot example
#| fig-align: center
# Include and execute your code here

fig = px.bar(weather, x='airport_code', y='proportion_weather_delay',
             labels={'airport_code': 'Airport Code', 'proportion_weather_delay': 'Proportion of Delayed Flights due to Weather'},
             title='Proportion of Delayed Flights due to Weather by Airport')


fig.update_layout(xaxis={'categoryorder':'total ascending'})

fig.show()

```
