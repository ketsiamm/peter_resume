---
title: "Client Report - [Insert Project Title]"
subtitle: "Course DS 250"
author: "[STUDENT NAME]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---
### uncomment

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px


```


## Elevator pitch

_ Overall the dwelling ml data gives us great insight about different houses from 1873 to 2013. Classifying houses as built before or after 1980 is crucial for real estate decisions. Our project simplifies this task, benefiting everyone from homebuyers to investors. _

```{python}
#| label: project data
#| code-summary: Read and format project data
# Include and execute your code here

url = "https://raw.githubusercontent.com/byuidatascience/data4dwellings/master/data-raw/dwellings_ml/dwellings_ml.csv"
data = pd.read_csv(url)
data.describe()
```

__Highlight the Questions and Tasks__

## QUESTION|TASK 1

__Create 2-3 charts that evaluate potential relationships between the home variables and before1980. Explain what you learn from the charts that could help a machine learning algorithm.__


_ from the different charts made we can conclude that we can some variable changes acoording to the times and that can help a machine learnimg algorithm in fiding pattern whithin the data and classify it ._

```{python}
#| label: Q1 chart
#| code-summary: plot example
#| fig-align: center
# Include and execute your code here
chart = px.scatter(data,
    x="before1980", 
    y="sprice",
    title='sales prices before and after 1980'
)

chart.show()
```


```{python}
#| label: Q1 table
#| code-summary: table example
#| tbl-cap-location: top
# Include and execute your code here
import plotly.express as px

# Assuming 'data' is your DataFrame containing the specified columns
house_features = data[['numbdrm', 'numbaths', 'sprice', 'nocars']]

# Create the scatter plot
chart = px.scatter(data, x="before1980", y='numbaths', title='Number of Bedrooms vs Year Before 1980')

# Update the scatter plot
chart.update_traces(marker=dict(size=12, opacity=0.8))  # Customize marker size and opacity

# Update layout
chart.update_layout(
    xaxis_title="Year Before 1980",
    yaxis_title="Number of Bedrooms",
    legend_title="Price",  # Update legend title
)

# Show the scatter plot
chart.show()



```


## QUESTION|TASK 2

__Build a classification model labeling houses as being built “before 1980” or “during or after 1980”. Your goal is to reach or exceed 90% accuracy. Explain your final model choice (algorithm, tuning parameters, etc) and describe what other models you tried.__

_ for my model i use a the Random Forest Classifier. In essence, a Random Forest Classifier combines the opinions of many decision-makers (trees) to make a more  reliable prediction. i tried the decision tree classifier and the MLP Classifier _

```{python}
#| label: Q2 table
#| code-summary: Read and format data
# Include and execute your code here
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
features = data[['sprice', 'numbdrm', 'numbaths','livearea','nocars','syear','stories','abstrprd','basement']]
target = data['before1980']

# Split the data into training and testing sets
train_data, test_data, train_targets, test_targets = train_test_split(features, target, test_size=0.3, random_state=42)

# Initialize RandomForestClassifier
model = RandomForestClassifier()

# Train the classifier on the training data
model.fit(train_data, train_targets)

# Predict on the testing data
y_pred = model.predict(test_data)

# Calculate accuracy
accuracy = accuracy_score(test_targets, y_pred)

print(f"Accuracy: {accuracy:.2f}")


```



## QUESTION|TASK 3

__Justify your classification model by discussing the most important features selected by your model. This discussion should include a chart and a description of the features.__

_ i decided to choose the Random Forest Classifier because it uses more trees to predict. for the features i notice that features like the sales price and the number of bedroom clearly changes over time.
 -for the sales price as we can see it actually see that the prices increase and decreases over time meaning that the prices are not constant which indicates that it is a good feature to use for our model because it allows the model to capture trends and differences in property values.
 -for the number of bedroom we can clearly see that most of the houses whith highest room are build before 1950     _

```{python}
#| label: Q3 table
#| code-summary: Read and format data
# Include and execute your code here

import plotly.express as px

# Assuming 'data' is your DataFrame containing 'yrbuilt', 'sprice', and 'annotation' columns

# Create scatter plot
import plotly.express as px

# Assuming 'data' is your DataFrame containing 'yrbuilt', 'sprice', and 'annotation' columns

# Create scatter plot
chart = px.scatter(data, x="yrbuilt", y="sprice", color="sprice", 
                   title="Year Built vs. Selling Price", 
                   labels={"yrbuilt": "Year Built", "sprice": "Selling Price"},
                   hover_name="sprice",  # Change this to the actual column name containing annotations
                   hover_data={"yrbuilt": True, "sprice": True})  # Include additional columns as needed

# Show the plot
chart.show()



```

_include figures in chunks and discuss your findings in the figure._

```{python}
#| label: Q3 chart
#| code-summary: plot example
#| fig-align: center
# Include and execute your code here

import plotly.express as px

# Assuming 'data' is your DataFrame containing the specified columns
house_features = data[['numbdrm', 'numbaths', 'sprice', 'nocars']]

# Create the scatter plot
chart = px.scatter(data, x="yrbuilt", y='numbdrm', title='Number of Bedrooms over years')

# Update the scatter plot
chart.update_traces(marker=dict(size=12, opacity=0.8))  # Customize marker size and opacity

# Update layout
chart.update_layout(
    xaxis_title="Years",
    yaxis_title="number of bedrooms",
    legend_title="Price",  # Update legend title
)

# Show the scatter plot
chart.show()

```

## QUESTION|TASK 4

__Describe the quality of your classification model using 2-3 different evaluation metrics. You also need to explain how to interpret each of the evaluation metrics you use.__

_ to evaluate the quality of my classification model i used the F1 score and the precision score.  precision measures the accuracy of positive predictions, while the F1 score provides a balanced measure of precision and recall. Both metrics are valuable for evaluating classifier performance._

```{python}
#| label: Q4 table
#| code-summary: table example
#| tbl-cap-location: top
# Include and execute your code here
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import f1_score
from sklearn.model_selection import train_test_split

features = data[['sprice', 'numbdrm', 'numbaths', 'livearea', 'nocars', 'syear', 'stories', 'abstrprd', 'basement']]
target = data['before1980']

# Split the data into training and testing sets
train_data, test_data, train_targets, test_targets = train_test_split(features, target, test_size=0.3, random_state=42)

# Initialize RandomForestClassifier
model = RandomForestClassifier()

# Train the classifier on the training data
model.fit(train_data, train_targets)

# Predict on the testing data
y_pred = model.predict(test_data)

# Calculate the F1 score
f1 = f1_score(test_targets, y_pred, average='weighted')

print("F1 Score:", f1)



```

```{python}
#| label: Q4 chart
#| code-summary: Read and format data
# Include and execute your code here
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import precision_score
from sklearn.model_selection import train_test_split

features = data[['sprice', 'numbdrm', 'numbaths', 'livearea', 'nocars', 'syear', 'stories', 'abstrprd', 'basement']]
target = data['before1980']

# Split the data into training and testing sets
train_data, test_data, train_targets, test_targets = train_test_split(features, target, test_size=0.3, random_state=42)

# Initialize RandomForestClassifier
model = RandomForestClassifier()

# Train the classifier on the training data
model.fit(train_data, train_targets)

# Predict on the testing data
y_pred = model.predict(test_data)

# Calculate the precision score
precision = precision_score(test_targets, y_pred, average='weighted')

print("Precision Score:", precision)

```
