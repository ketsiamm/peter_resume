[
  {
    "objectID": "story_telling.html",
    "href": "story_telling.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "story_telling.html#title-2-header",
    "href": "story_telling.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "DS250 Projects",
    "section": "",
    "text": "Project 1\nProject 2\nProject 3\nProject 4\nProject 5"
  },
  {
    "objectID": "projects.html#repo-for-all-my-projects",
    "href": "projects.html#repo-for-all-my-projects",
    "title": "DS250 Projects",
    "section": "",
    "text": "Project 1\nProject 2\nProject 3\nProject 4\nProject 5"
  },
  {
    "objectID": "Projects/project4.html",
    "href": "Projects/project4.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "uncomment\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Projects/project2.html",
    "href": "Projects/project2.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "overall the flight data gives insights about flights in seven different airport it has important feature to visualize and analyse about flight delay .\n\n\nRead and format project data\n# Include and execute your code here\ndf_original = pd.read_json('https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json')"
  },
  {
    "objectID": "Projects/project2.html#elevator-pitch",
    "href": "Projects/project2.html#elevator-pitch",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "overall the flight data gives insights about flights in seven different airport it has important feature to visualize and analyse about flight delay .\n\n\nRead and format project data\n# Include and execute your code here\ndf_original = pd.read_json('https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json')"
  },
  {
    "objectID": "Projects/project2.html#questiontask-1",
    "href": "Projects/project2.html#questiontask-1",
    "title": "Client Report - [Insert Project Title]",
    "section": "QUESTION|TASK 1",
    "text": "QUESTION|TASK 1\nFix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”). In your report include one record example (one row) from your new data, in the raw JSON format. Your example should display the “NaN” for at least one missing value.\n\n\nRead and format data\n# Include and execute your code here\n\ndf = df_original\n\n#summing all the missing values by columns\n\nmissing_values = df.isna().sum()\n#filling the missing years values\ndf['year'] = df['year'].fillna(method ='ffill')\ndf.head()\n\n\n#filling the missing minutes_delayed_carrier values with the mean\n\nmean_d_carrier = df['minutes_delayed_carrier'].mean()\ndf['minutes_delayed_carrier'] = df['minutes_delayed_carrier'].fillna(mean_d_carrier)\n\n# replacing the -999 of num_of_delays_late_aircraft values with NaN\n\ndf['num_of_delays_late_aircraft'] = df['num_of_delays_late_aircraft'].replace(-999,np.nan)\n#dropping the NaN values\ndf.dropna(inplace=True)\n#dropping the empty string\ndf = df[df['airport_name'] != '']\ndf = df[df['month'] != '']\n\n\n\n\n# Assuming df is your DataFrame\n\n\n\n\n# Convert the first record to JSON format\nraw_json = df.head(1).to_json(orient='records')\n\n\n\n\nplot example\n# Include and execute your code here\n\nraw_json\n\n\n'[{\"airport_code\":\"DEN\",\"airport_name\":\"Denver, CO: Denver International\",\"month\":\"January\",\"year\":2005.0,\"num_of_flights_total\":12687,\"num_of_delays_carrier\":\"1041\",\"num_of_delays_late_aircraft\":928.0,\"num_of_delays_nas\":935,\"num_of_delays_security\":11,\"num_of_delays_weather\":233,\"num_of_delays_total\":3153,\"minutes_delayed_carrier\":53537.0,\"minutes_delayed_late_aircraft\":70301,\"minutes_delayed_nas\":36817.0,\"minutes_delayed_security\":363,\"minutes_delayed_weather\":21779,\"minutes_delayed_total\":182797}]'\nMy useless chart"
  },
  {
    "objectID": "Projects/project2.html#questiontask-2",
    "href": "Projects/project2.html#questiontask-2",
    "title": "Client Report - [Insert Project Title]",
    "section": "QUESTION|TASK 2",
    "text": "QUESTION|TASK 2\nWhich airport has the worst delays? Discuss the metric you chose, and why you chose it to determine the “worst” airport. Your answer should include a summary table that lists (for each airport) the total number of flights, total number of delayed flights, proportion of delayed flights, and average delay time in hours.\ni am using the total number of delay and the total number of minute delay to evaluate the airport that has the worst delay and after analysis it is the Chicago O’Hare International airport that has the worst one. i choose those metrics because it sum all the differents delays that we have on the tables\n\n\nRead and format data\n# Include and execute your code here\n\n# import pandas as pd\n\ndf['minute_delayed_hours'] = df['minutes_delayed_total'] / 60\n\ndf['proportion_of_delayed_flight'] = df['num_of_delays_total']/ df['num_of_flights_total']\n\nworst_airport = df.groupby('airport_name').agg(\n    total_flights=pd.NamedAgg(column='num_of_flights_total', aggfunc='sum'),\n    total_number_of_delayed=pd.NamedAgg(column='num_of_delays_total', aggfunc='sum'),\n    average_delay=pd.NamedAgg(column='minute_delayed_hours', aggfunc='mean'),\n    proportion_delay = pd.NamedAgg(column='proportion_of_delayed_flight', aggfunc='sum')\n).round(2)\nworst_airport = worst_airport.reset_index()\n\n\nithis table shows the different number of total delay,average delay and portion delay by airport. It can help us understand which airport has the worst delay by flight \n\n\ntable example\n# Include and execute your code here\nworst_airport\n\n\n\n\n\n\ntable of the total_flights,total_number_of_delayed, average_delay and proportion_delay by airport \n\n\n\nairport_name\ntotal_flights\ntotal_number_of_delayed\naverage_delay\nproportion_delay\n\n\n\n\n0\nAtlanta, GA: Hartsfield-Jackson Atlanta Intern...\n2920368\n530940\n5958.22\n15.88\n\n\n1\nChicago, IL: Chicago O'Hare International\n3149810\n695137\n6683.35\n25.40\n\n\n2\nDenver, CO: Denver International\n2243898\n424413\n3223.95\n22.24\n\n\n3\nSalt Lake City, UT: Salt Lake City International\n1271492\n187508\n1292.40\n17.46\n\n\n4\nSan Diego, CA: San Diego International\n844505\n162010\n1050.03\n23.07\n\n\n5\nSan Francisco, CA: San Francisco International\n1496085\n393741\n3395.90\n31.79\n\n\n6\nWashington, DC: Washington Dulles International\n743192\n146579\n1280.74\n22.72"
  },
  {
    "objectID": "Projects/project2.html#questiontask-3",
    "href": "Projects/project2.html#questiontask-3",
    "title": "Client Report - [Insert Project Title]",
    "section": "QUESTION|TASK 3",
    "text": "QUESTION|TASK 3\nWhat is the best month to fly if you want to avoid delays of any length? Discuss the metric you chose and why you chose it to calculate your answer. Include one chart to help support your answer, with the x-axis ordered by month. (To answer this question, you will need to remove any rows that are missing the Month variable.)\n_ if you want to avoid delay of any sort you should fly in november because it got the lowest delay of average of delay. i choose the hours delay because i think that no matter the amount of delay you can have what matter most is the amount of time because people can bear some minute delay even if it happen frequently_\n\n\nRead and format data\n# Include and execute your code here\ndf['month'].replace('n/a',np.nan,inplace =True)\ndf.dropna(inplace=True)\n\ndf['minute_delayed_hours'] =( df['minutes_delayed_total'] / 60 ).round(2)\nbest_months = df.groupby('month').agg(\n     average_delay=pd.NamedAgg(column='minute_delayed_hours', aggfunc='mean')\n\n).round(2)\nbest_months = best_months.reset_index()\n\n\n\n\nplot example\n# Include and execute your code here\n\n\n# Assuming 'best_months' DataFrame contains the data with the 'month' column as an ordered categorical variable\n\n# Define the order of the months\nmonth_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\n# Convert 'month' column to ordered categorical with specified order\nbest_months['month'] = pd.Categorical(best_months['month'], categories=month_order, ordered=True)\n\n# Sort 'best_months' DataFrame by the 'month' column\nbest_months_sorted = best_months.sort_values(by='month', ignore_index=True)\n\n# Plot bar chart using Plotly Express\nchart = px.bar(best_months_sorted,\n               x='month',\n               y='average_delay',\n               title='Average Delay by Month',\n               labels={'month': 'Month', 'average_delay': 'Average Delay'})\n\n# Show the chart\nchart.show()\n\n\n\n                                                \naverage delay by month"
  },
  {
    "objectID": "Projects/project2.html#questiontask-4",
    "href": "Projects/project2.html#questiontask-4",
    "title": "Client Report - [Insert Project Title]",
    "section": "QUESTION|TASK 4",
    "text": "QUESTION|TASK 4\nAccording to the BTS website, the “Weather” category only accounts for severe weather delays. Mild weather delays are not counted in the “Weather” category, but are actually included in both the “NAS” and “Late-Arriving Aircraft” categories. Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild). You will need to replace all the missing values in the Late Aircraft variable with the mean. Show your work by printing the first 5 rows of data in a table. Use these three rules for your calculations\nthis weather table show the number of delay flight by weather(both severe and mild), the proportion of weather delay and the proportion of weather total .\n\n\ntable example\n# Include and execute your code here\nflights = df\nweather = (flights.assign(\n    severe = flights.num_of_delays_weather, # no missing\n    nodla_nona = lambda x: (x.num_of_delays_late_aircraft\n        .replace(-999, np.nan)), #missing is -999\n    mild_late = lambda x: x.nodla_nona.fillna(x.nodla_nona.mean())*0.3,\n    mild = np.where(\n        flights.month.isin(['April', 'May', 'June', 'July', 'August']), \n            flights.num_of_delays_nas*0.4,\n            flights.num_of_delays_nas*0.65),\n    weather = lambda x: x.severe + x.mild_late + x.mild,\n    proportion_weather_delay = lambda x: x.weather / x.num_of_delays_total,\n    proportion_weather_total = lambda x:  x.weather / x.num_of_flights_total)\n    .filter(['airport_code','month','year', 'severe','mild', 'mild_late',\n    'weather', 'proportion_weather_total', \n    'proportion_weather_delay', 'num_of_flights_total', 'num_of_delays_total']))\nweather.head()\n\n\n\n\n\n\nweather table \n\n\n\nairport_code\nmonth\nyear\nsevere\nmild\nmild_late\nweather\nproportion_weather_total\nproportion_weather_delay\nnum_of_flights_total\nnum_of_delays_total\n\n\n\n\n1\nDEN\nJanuary\n2005.0\n233\n607.75\n278.4\n1119.15\n0.088212\n0.354948\n12687\n3153\n\n\n3\nORD\nJanuary\n2005.0\n306\n3519.75\n676.5\n4502.25\n0.159688\n0.490548\n28194\n9178\n\n\n4\nSAN\nJanuary\n2005.0\n56\n414.70\n204.0\n674.70\n0.092640\n0.345645\n7283\n1952\n\n\n5\nSFO\nJanuary\n2005.0\n114\n757.90\n219.9\n1091.80\n0.106268\n0.387713\n10274\n2816\n\n\n6\nSLC\nJanuary\n2005.0\n270\n561.60\n169.2\n1000.80\n0.083400\n0.396356\n12000\n2525"
  },
  {
    "objectID": "Projects/project2.html#questiontask-5",
    "href": "Projects/project2.html#questiontask-5",
    "title": "Client Report - [Insert Project Title]",
    "section": "QUESTION|TASK 5",
    "text": "QUESTION|TASK 5\nUsing the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Discuss what you learn from this graph.\nas we can see this chart the San Franscisco airport has the highest proportion of flight delayed by weather and that the Atlanta airport has the lowest one. \n\n\nplot example\n# Include and execute your code here\n\nfig = px.bar(weather, x='airport_code', y='proportion_weather_delay',\n             labels={'airport_code': 'Airport Code', 'proportion_weather_delay': 'Proportion of Delayed Flights due to Weather'},\n             title='Proportion of Delayed Flights due to Weather by Airport')\n\n\nfig.update_layout(xaxis={'categoryorder':'total ascending'})\n\nfig.show()\n\n\n\n                                                \naverage delay by month"
  },
  {
    "objectID": "ml.html",
    "href": "ml.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "ml.html#title-2-header",
    "href": "ml.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "full_stack.html",
    "href": "full_stack.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "full_stack.html#title-2-header",
    "href": "full_stack.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "competition.html",
    "href": "competition.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "competition.html#title-2-header",
    "href": "competition.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "cleansing.html",
    "href": "cleansing.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "cleansing.html#title-2-header",
    "href": "cleansing.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "exploration.html",
    "href": "exploration.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "exploration.html#title-2-header",
    "href": "exploration.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "index.html#title-2-header",
    "href": "index.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "Projects/project1.html",
    "href": "Projects/project1.html",
    "title": "Client Report - [what’s in a name ]",
    "section": "",
    "text": "_ Overall the data contains key insight about the names accros the United State from 1920 to 2015. Christian names were the most popular ones but with time other name started to become more poular than the Christian names_ _ _\n\n\nRead and format project data\n# Include and execute your code here\ndf = pd.read_csv(\"https://github.com/byuidatascience/data4names/raw/master/data-raw/names_year/names_year.csv\")\n\n\nHighlight the Questions and Tasks"
  },
  {
    "objectID": "Projects/project1.html#elevator-pitch",
    "href": "Projects/project1.html#elevator-pitch",
    "title": "Client Report - [what’s in a name ]",
    "section": "",
    "text": "_ Overall the data contains key insight about the names accros the United State from 1920 to 2015. Christian names were the most popular ones but with time other name started to become more poular than the Christian names_ _ _\n\n\nRead and format project data\n# Include and execute your code here\ndf = pd.read_csv(\"https://github.com/byuidatascience/data4names/raw/master/data-raw/names_year/names_year.csv\")\n\n\nHighlight the Questions and Tasks"
  },
  {
    "objectID": "Projects/project1.html#questiontask-1",
    "href": "Projects/project1.html#questiontask-1",
    "title": "Client Report - [what’s in a name ]",
    "section": "QUESTION|TASK 1",
    "text": "QUESTION|TASK 1\nHow does your name at your birth year compare to its use historically?\n_ compared to the average of my name in history which is 4955.21 my name during my birth year is with a total 3137 is below the average _\n\n\nRead and format data\n# Include and execute your code here\n\n\npeter_in_history = df.query('name == \"Peter\"')\naverage = peter_in_history['Total'].mean()\n\n\n\n\nplot example\n# Include and execute your code here\n\n\n\n# scatter\nscatter_plot = px.scatter(\n    peter_in_history,\n    x=\"year\",\n    y=\"Total\",\n    title=\"Scatter Plot with Trendline for Peter's Historical Data\",\n    trendline=\"ols\"  # Add a trendline using Ordinary Least Squares regression\n)\n# annotation\nscatter_plot.add_annotation(\n    text=\"Peter in 2000\",\n    x=2000,\n    y=3137,\n    showarrow=True,\n    arrowhead=7,\n    arrowcolor='red'\n\n)\n# Show the plot\nscatter_plot.show()\n\n\n\n                                                \n\n\n_ here is a table of my name (Peter) in my birthdate and the highest peter in history to see the difference _\n\n\ntable example\n# Include and execute your code here\n\npeter_in_2000 = df.query('name == \"Peter\" and year == 2000')\npeter_in_history = df.query('name == \"Peter\"')\nPeter_max_total = peter_in_history[peter_in_history['Total'] == peter_in_history['Total'].max()].filter(['year', 'Total'])\n\nprint(\"peter_in_2000:\")\nprint(peter_in_2000)\n\nprint(\"\\nPeter_max_total:\")\nprint(Peter_max_total)\n\n\npeter_in_2000:\n         name  year    AK    AL    AR    AZ     CA    CO    CT    DC  ...   \n303695  Peter  2000  11.0  14.0  11.0  40.0  379.0  66.0  72.0  20.0  ...  \\\n\n          TN     TX    UT    VA    VT    WA    WI   WV   WY   Total  \n303695  26.0  147.0  24.0  62.0  12.0  68.0  70.0  0.0  0.0  3137.0  \n\n[1 rows x 54 columns]\n\nPeter_max_total:\n        year    Total\n303651  1956  11321.0"
  },
  {
    "objectID": "Projects/project1.html#questiontask-2",
    "href": "Projects/project1.html#questiontask-2",
    "title": "Client Report - [what’s in a name ]",
    "section": "QUESTION|TASK 2",
    "text": "QUESTION|TASK 2\nIf you talked to someone named Brittany on the phone, what is your guess of his or her age? What ages would you not guess?\n_ My guess is that she was probably born in 1990, and she is 34 years old because that is the year that had the highest record of people born named Brittany. I wouldn’t guess that she was born in 1971 and that she is 51 because that is the year with the lowest record of people named Brittany. _\n\n\nRead and format data\n# Include and execute your code here\nbrittany = df.query('name == \"Brittany\"')# query all the brittany\nbrittany_max = brittany[['year','Total']]# query the brittany their birth year and the total name for that year\n\n\n\n\nplot example\n# Include and execute your code here\n\n# Filter data for the name 'Brittany'\nbrittany = df.query('name == \"Brittany\"')\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# brittany\nbrittany = df.query('name == \"Brittany\"')\n\n# Create a line chart\nchart = px.line(\n    brittany,\n    x=\"year\",\n    y=\"Total\",\n    title=\"Line Chart with Trendline and Annotation\"\n)\n\n# Add a trace for the trendline\ntrendline_trace = go.Scatter(\n    x=[1990],\n    y=[32562.5],\n    mode='markers',\n    marker=dict(color='green'),\n    name='Highest Brittany in 1990'\n)\n\nchart.add_trace(trendline_trace)\n\n# Update traces to add a trendline\nchart.update_traces(\n    mode='lines',\n    line=dict(color='blue'),\n    selector=dict(type='scatter')\n)\n\n# Add a text annotation\nchart.add_annotation(\n    text=\"Highest Brittany in 1990\",\n    x=1990,\n    y=32562.5,\n    showarrow=True,\n    arrowhead=2,\n    arrowcolor='green'\n)\n\n# Show the plot\nchart.show()\n\n\n\n                                                \n\n\n_ here is a table of the name Brittany, the total and the year where it reach it peak\n\n\ntable example\n# Include and execute your code here\n\nbrittany_max_total = brittany_max[brittany_max['Total'] == brittany_max['Total'].max()].filter(['year', 'Total'])\n\nbrittany_max_total# return the year with the most Brittany\n\n\n\n\n\n\ntable of the year with the most Brittany \n\n\n\nyear\nTotal\n\n\n\n\n53227\n1990\n32562.5"
  },
  {
    "objectID": "Projects/project1.html#questiontask-3",
    "href": "Projects/project1.html#questiontask-3",
    "title": "Client Report - [what’s in a name ]",
    "section": "QUESTION|TASK 3",
    "text": "QUESTION|TASK 3\nMary, Martha, Peter, and Paul are all Christian names. From 1920 - 2000, compare the name usage of each of the four names. What trends do you notice?\n_ They all mostly followed the same pattern Mary: a slightly increase in 1921 a decrease in 1936 a peak in 1950 and it continues to decreased to the end Paul: an increase that reach its peak in 1953 and a decrease in the end Martha: a slightly increase that reach its peak in 1947 and a decrease in the end Peter: an increase that reach its peak in 1956 and a constant decrease\n\n\nRead and format data\n# Include and execute your code here\n# list = ['Mary'.'Martha','Peter','Paul']\nfiltered = df.query(\"name==['Mary','Martha','Peter','Paul']&year&gt;= 1920 & year&lt;=2000\")\nfiltered_1 = filtered.filter(['name','year','Total'])\n# average = filtered_1['Total'].mean()\n\n\n\n\nCode\n# filtered_1.head()\n# average\n\n\n\n\nplot example\n# Include and execute your code here\n\nchart = px.line(filtered_1, \n    x=\"year\", \n    y=\"Total\", \n    color='name', \n    line_group='name',  \n    title='Line Chart of Mary, Martha, Peter, and Paul')\n\n\nchart.show()"
  },
  {
    "objectID": "Projects/project1.html#questiontask-4",
    "href": "Projects/project1.html#questiontask-4",
    "title": "Client Report - [what’s in a name ]",
    "section": "QUESTION|TASK 4",
    "text": "QUESTION|TASK 4\nThink of a unique name from a famous movie. Plot the usage of that name and see how changes line up with the movie release. Does it look like the movie had an effect on usage? i choose the name Bella from the Twillight moovie. I noticed that overall from the year 2000 to 2010 there was an increase from 245 to 5109 an in crease of 1985.71%. From the movie realease in 2008 to the next year we witneesed an increseased of 53.78% compared to the increased from 2000 to the release year where it was 36.32%\n\n\nplot example\n# Include and execute your code here\n\nbella = df.query('name == \"Bella\"')\nyear_bella = bella.query('year == 2008')\nyear_bella\n\nchart = px.line(bella, \n    x=\"year\", \n    y=\"Total\",  \n    title='Line Chart of Total over Years for Selected Names',\n    \n    )\n\nchart.add_annotation(\n    text=\"Release date\",\n    x=2008,\n    y=2778,\n    showarrow=True,\n    arrowhead=2,\n    arrowcolor='red'\n)\n\n\nchart.show()\n\n\n\n                                                \n\n\n\n\ntable example\n# Include and execute your code here\nJohn = df.query('name == \"John \" & name == \"Peter\"')\narrange = df.filter(['name','year'])\narrange\ndrop = arrange.drop(columns= ['name'])\ndrop\n\n\n\n\n\n\nNot much of a table \n\n\n\nyear\n\n\n\n\n0\n2005\n\n\n1\n2007\n\n\n2\n2008\n\n\n3\n2009\n\n\n4\n2010\n\n\n...\n...\n\n\n393379\n2011\n\n\n393380\n2012\n\n\n393381\n2013\n\n\n393382\n2014\n\n\n393383\n2015\n\n\n\n\n393384 rows × 1 columns"
  },
  {
    "objectID": "Projects/project3.html",
    "href": "Projects/project3.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "uncomment\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Projects/project5.html",
    "href": "Projects/project5.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "uncomment\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Ketsiammen Peter’s CV",
    "section": "",
    "text": "aspiring Data Scientist\nMy linkedin page"
  },
  {
    "objectID": "resume.html#profile-summary",
    "href": "resume.html#profile-summary",
    "title": "Ketsiammen Peter’s CV",
    "section": "Profile summary",
    "text": "Profile summary\nPassionate data science and tech enthusiast eager to apply my academic knowledge and hands-on skills in a dynamic setting. Detail-oriented and dedicated individual with a strong foundation in Microsoft Office Suite, specializing in Word, PowerPoint, and Excel for document creation, presentations, and data entry. Proficient in leveraging Python for efficient problem-solving and scripting, with a focus on clean code practices. Experienced in MySQL for database management, showcasing abilities in data retrieval, manipulation, and basic optimization. Excited about expanding expertise in advanced database design and query optimization. Recognized for adaptability, quick learning, and a commitment to using technology for effective problem resolution. Seeking opportunities to contribute and grow in a challenging environment."
  },
  {
    "objectID": "resume.html#language",
    "href": "resume.html#language",
    "title": "Ketsiammen Peter’s CV",
    "section": "Language",
    "text": "Language\nfrench(native), english(advanced)"
  },
  {
    "objectID": "resume.html#education",
    "href": "resume.html#education",
    "title": "Ketsiammen Peter’s CV",
    "section": "Education",
    "text": "Education\n2022-now Brigham Young University, Idaho.\nstudying Data Science"
  },
  {
    "objectID": "resume.html#experience",
    "href": "resume.html#experience",
    "title": "Ketsiammen Peter’s CV",
    "section": "Experience",
    "text": "Experience\nMarch 2023 Allen Design Company\nCollaborated with Allen Designs, a small business in Las Vegas, Nevada, specializing in crafting functional and aesthetically pleasing interior spaces to address the needs in managing finances and executing effective digital marketing strategies.\nimproved company website by proposing various website template, Logos ,slogans and names.\nAdvised various marketing plans to help company reach more customers."
  },
  {
    "objectID": "resume.html#skils",
    "href": "resume.html#skils",
    "title": "Ketsiammen Peter’s CV",
    "section": "skils",
    "text": "skils\n\ncomputer skills\nMicrosoft Office Suite: Competent in utilizing essential functions of Word for document creation, PowerPoint for basic presentations, and Excel for fundamental data entry and spreadsheet tasks.\nProgramming Languages and Database Management: Python: Proficient in writing and debugging Python code, with a focus on problem-solving and scripting tasks. MySQL: Competent in database management using MySQL, including data retrieval, manipulation, and basic optimization. Eager to expand skills in database design and advanced query optimization."
  }
]